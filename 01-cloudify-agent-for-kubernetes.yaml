tosca_definitions_version: cloudify_dsl_1_3

description: >
  Based on this example: https://github.com/font/k8s-example-apps/tree/master/pacman-nginx-app

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/kim135797531/cloudify-kubernetes-plugin/master/plugin.yaml
  # - https://raw.githubusercontent.com/cloudify-incubator/cloudify-kubernetes-plugin/1.2.1/plugin.yaml
  # - plugins/cloudify-kubernetes-plugin/plugin.yaml
  - http://cloudify.co/spec/diamond-plugin/1.3.6/plugin.yaml

inputs:

  kubernetes_cluster_configuration_1:
    default:
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: TRUNCATED
          server: https://1.1.1.1
        name: gke_cloudify-kubefed_asia-northeast1-a_cluster1
      contexts:
      - context:
          cluster: gke_cloudify-kubefed_asia-northeast1-a_cluster1
          user: gke_cloudify-kubefed_asia-northeast1-a_cluster1
        name: gke-cloudify-kubefed-asia-northeast1-a-cluster1
      current-context: gke-cloudify-kubefed-asia-northeast1-a-cluster1
      kind: Config
      preferences: {}
      users:
      - name: gke_cloudify-kubefed_asia-northeast1-a_cluster1
        user:
          client-certificate-data: TRUNCATED
          client-key-data: TRUNCATED
          password: TRUNCATED
          username: admin

node_types:

  cloudify.kubernetes.resources.PersistentVolumeClaim:
    derived_from: cloudify.kubernetes.resources.Main
    properties:
      _api_mapping:
        default:
          create:
            api: CoreV1Api
            method: create_namespaced_persistent_volume_claim
            payload: V1PersistentVolumeClaim
          read:
            api: CoreV1Api
            method: read_namespaced_persistent_volume_claim
          delete:
            api: CoreV1Api
            method: delete_namespaced_persistent_volume_claim
            payload: V1DeleteOptions

node_templates:

  agent_svc:
    type: cloudify.kubernetes.resources.Service
    properties:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: agent-svc
          labels:
            name: agent-svc
        spec:
          type: LoadBalancer
          ports:
            - port: 80
              targetPort: 80
              protocol: TCP
          selector:
            name: agent-svc
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_1
      - type: cloudify.relationships.connected_to
        target: agent_pod

  agent_pod:
    type: cloudify.kubernetes.resources.ReplicaSet
    properties:
      # TODO: Placeholders for cloudify_agent/installer/config/agent_config.py, k8s operations.py
      ip: 0.0.0.0
      agent_config:
        install_method: remote
        disable_requiretty: False
        user: root
        password: password_placeholder
        extra:
          shell: True
          conn_cmd: 'conn_cmd_placeholder'
          sh_cmd: '/bin/sh'
          kubeconfig: { get_input: kubernetes_cluster_configuration_1 }
      definition:
        apiVersion: extensions/v1beta1
        kind: ReplicaSet
        metadata:
          labels:
            name: agent-pod
          name: agent-pod
        spec:
          replicas: 1
          template:
            metadata:
              labels:
                name: agent-pod
            spec:
              containers:
              - image: gcr.io/cloudify-kubefed/pacman-nginx-app:v3
                name: agent-pod
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                  name: http-server
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              CPUCollector: {}
              MemoryCollector: {}
              LoadAverageCollector: {}
              DiskUsageCollector:
                config:
                  devices: x?vd[a-z]+[0-9]*$
              NetworkCollector: {}
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_1

  kubernetes_cluster_1:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_cluster_configuration_1 }
