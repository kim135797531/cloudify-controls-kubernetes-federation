tosca_definitions_version: cloudify_dsl_1_3

description: >
  Based on this example: https://github.com/font/k8s-example-apps/tree/master/pacman-nginx-app

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/kim135797531/cloudify-kubernetes-plugin/master/plugin.yaml
  # - https://raw.githubusercontent.com/cloudify-incubator/cloudify-kubernetes-plugin/1.2.1/plugin.yaml
  # - plugins/cloudify-kubernetes-plugin/plugin.yaml
  - http://cloudify.co/spec/diamond-plugin/1.3.6/plugin.yaml

inputs:

  kubernetes_federation_configuration:
    default:
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: TRUNCATED
          server: https://3.3.3.3
        name: fellowship
      contexts:
      - context:
          cluster: fellowship
          user: fellowship
        name: fellowship
      current-context: fellowship
      kind: Config
      preferences: {}
      users:
      - name: ""
        user: {}
      - name: fellowhip-basic-auth
        user:
          as-user-extra: {}
          password: TRUNCATED
          username: admin
      - name: fellowship
        user:
          as-user-extra: {}
          client-certificate-data: TRUNCATED
          client-key-data: TRUNCATED
          token: TRUNCATED
      - name: fellowship-basic-auth
        user:
          as-user-extra: {}
          password: TRUNCATED
          username: admin

  kubernetes_cluster_configuration_1:
    default:
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: TRUNCATED
          server: https://1.1.1.1
        name: gke_cloudify-kubefed_asia-northeast1-a_cluster1
      contexts:
      - context:
          cluster: gke_cloudify-kubefed_asia-northeast1-a_cluster1
          user: gke_cloudify-kubefed_asia-northeast1-a_cluster1
        name: gke-cloudify-kubefed-asia-northeast1-a-cluster1
      current-context: gke-cloudify-kubefed-asia-northeast1-a-cluster1
      kind: Config
      preferences: {}
      users:
      - name: gke_cloudify-kubefed_asia-northeast1-a_cluster1
        user:
          client-certificate-data: TRUNCATED
          client-key-data: TRUNCATED
          password: TRUNCATED
          username: admin

  kubernetes_cluster_configuration_2:
    default:
      apiVersion: v1
      clusters:
      - cluster:
          certificate-authority-data: TRUNCATED
          server: https://2.2.2.2
        name: gke_cloudify-kubefed_us-west1-a_cluster2
      contexts:
      - context:
          cluster: gke_cloudify-kubefed_us-west1-a_cluster2
          user: gke_cloudify-kubefed_us-west1-a_cluster2
        name: gke-cloudify-kubefed-us-west1-a-cluster2
      current-context: gke-cloudify-kubefed-us-west1-a-cluster2
      kind: Config
      preferences: {}
      users:
      - name: gke_cloudify-kubefed_us-west1-a_cluster2
        user:
          client-certificate-data: TRUNCATED
          client-key-data: TRUNCATED
          password: TRUNCATED
          username: admin

node_types:

  cloudify.kubernetes.resources.PersistentVolumeClaim:
    derived_from: cloudify.kubernetes.resources.Main
    properties:
      _api_mapping:
        default:
          create:
            api: CoreV1Api
            method: create_namespaced_persistent_volume_claim
            payload: V1PersistentVolumeClaim
          read:
            api: CoreV1Api
            method: read_namespaced_persistent_volume_claim
          delete:
            api: CoreV1Api
            method: delete_namespaced_persistent_volume_claim
            payload: V1DeleteOptions

node_templates:

  ### A. Should be executed for each clusters.
  # A.1. Make a storage class for MongoDB.
  mongo_storage_class_1:
    type: cloudify.kubernetes.resources.StorageClass
    properties:
      definition:
        apiVersion: storage.k8s.io/v1beta1
        kind: StorageClass
        metadata:
          name: slow
        provisioner: kubernetes.io/gce-pd
        parameters:
          type: pd-standard
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_1

  mongo_storage_class_2:
    type: cloudify.kubernetes.resources.StorageClass
    properties:
      definition:
        apiVersion: storage.k8s.io/v1beta1
        kind: StorageClass
        metadata:
          name: slow
        provisioner: kubernetes.io/gce-pd
        parameters:
          type: pd-standard
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_2

  # A.2. Request a volume claim for MongoDB.
  mongo_pv_claim_1:
    type: cloudify.kubernetes.resources.PersistentVolumeClaim
    properties:
      definition:
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: mongo-storage
          annotations:
            volume.beta.kubernetes.io/storage-class: "slow"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 8Gi
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_1
      - type: cloudify.relationships.connected_to
        target: mongo_storage_class_1

  mongo_pv_claim_2:
    type: cloudify.kubernetes.resources.PersistentVolumeClaim
    properties:
      definition:
        kind: PersistentVolumeClaim
        apiVersion: v1
        metadata:
          name: mongo-storage
          annotations:
            volume.beta.kubernetes.io/storage-class: "slow"
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 8Gi
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_cluster_2
      - type: cloudify.relationships.connected_to
        target: mongo_storage_class_2

  ### B. Should be executed for federated cluster.
  # B.1.a. MongoDB - LoadBalancer Service
  mongo_svc:
    type: cloudify.kubernetes.resources.Service
    properties:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          labels:
            name: mongo
          name: mongo
        spec:
          type: LoadBalancer
          ports:
            - port: 27017
              targetPort: 27017
          selector:
            name: mongo
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_federation
      - type: cloudify.relationships.connected_to
        target: mongo_rs

  # B.1.b. MongoDB - ReplicaSet
  mongo_rs:
    type: cloudify.kubernetes.resources.ReplicaSet
    properties:
      definition:
        apiVersion: extensions/v1beta1
        kind: ReplicaSet
        metadata:
          labels:
            name: mongo
          name: mongo
        spec:
          replicas: 2
          template:
            metadata:
              labels:
                name: mongo
            spec:
              containers:
              - image: mongo
                name: mongo
                ports:
                - name: mongo
                  containerPort: 27017
                  hostPort: 27017
                args:
                  - --replSet
                  - rs0
                volumeMounts:
                  - name: mongo-db
                    mountPath: /data/db
              volumes:
                - name: mongo-db
                  persistentVolumeClaim:
                    claimName: mongo-storage
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_federation
      - type: cloudify.relationships.connected_to
        target: mongo_pv_claim_1
      - type: cloudify.relationships.connected_to
        target: mongo_pv_claim_2

  # B.2.a. NGINX - LoadBalancer Service
  pacman_svc:
    type: cloudify.kubernetes.resources.Service
    properties:
      definition:
        apiVersion: v1
        kind: Service
        metadata:
          name: pacman
          labels:
            name: pacman
        spec:
          type: LoadBalancer
          ports:
            - port: 80
              targetPort: 80
              protocol: TCP
          selector:
            name: pacman
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_federation
      - type: cloudify.relationships.connected_to
        target: pacman_rs

  # B.2.b. NGINX - ReplicaSet
  pacman_rs:
    type: cloudify.kubernetes.resources.ReplicaSet
    properties:
      definition:
        apiVersion: extensions/v1beta1
        kind: ReplicaSet
        metadata:
          labels:
            name: pacman
          name: pacman
        spec:
          replicas: 2
          template:
            metadata:
              labels:
                name: pacman
            spec:
              containers:
              - image: gcr.io/cloudify-kubefed/pacman-nginx-app:v3
                name: pacman
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                  name: http-server
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_federation
      - type: cloudify.relationships.connected_to
        target: mongo_rs

  # B.3. HorizontalPodAutoscaler
  pacman_hpa:
    type: cloudify.kubernetes.resources.HorizontalPodAutoscaler
    properties:
      definition:
        apiVersion: autoscaling/v1
        kind: HorizontalPodAutoscaler
        metadata:
          name: pacman-hpa
          namespace: default
        spec:
          scaleTargetRef:
            apiVersion: apps/v1beta1
            kind: ReplicaSet
            name: pacman
          minReplicas: 1
          maxReplicas: 10
          targetCPUUtilizationPercentage: 50
    relationships:
      - type: cloudify.kubernetes.relationships.managed_by_master
        target: kubernetes_federation
      - type: cloudify.relationships.connected_to
        target: pacman_rs

  kubernetes_federation:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_federation_configuration }

  kubernetes_cluster_1:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_cluster_configuration_1 }

  kubernetes_cluster_2:
    type: cloudify.kubernetes.nodes.Master
    properties:
      configuration:
        file_content: { get_input: kubernetes_cluster_configuration_2 }